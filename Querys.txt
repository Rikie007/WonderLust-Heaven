Querys

1. List all available travel packages with price, duration, and best season
SELECT package_name, price, duration, best_season
FROM Packages
WHERE availability_ = â€˜Yes';

2. Get all bookings done by a particular user (with their name and package booked)
SELECT u.user_id, pb.booking_id, p.package_name, pb.booking_date, pb.booking_status
FROM Package_Booking pb
JOIN LoggedInUser u ON u.user_id = pb.user_id
JOIN Packages p ON p.package_id = pb.package_id
WHERE u.user_id = 1; -- replace with actual user_id

3. Get the guides who know 'French'
SELECT g.guide_id, g.specialization, g.yrs_of_experience
FROM Guide g
JOIN Languages_Known lk ON g.guide_id = lk.guide_id
WHERE lk.language_ = 'French';

4. Show feedback for a particular package
SELECT pf.rating, pf.review, pf.date_
FROM Pack_Feedback pf
WHERE pf.package_id = 1; -- replace with actual package_id

5. Find top 5 most expensive packages
SELECT package_name, price
FROM Packages
ORDER BY price DESC
LIMIT 5;


6. Total amount paid by a user for a booking
SELECT SUM(pd.paid) AS total_paid
FROM Payment_done pd
WHERE pd.user_id = 1 AND pd.booking_id = 1;

7. Agents and the total commission they earned
SELECT agent_id, SUM(amount) AS total_commission
FROM Commission_earned_agent
GROUP BY agent_id
ORDER BY total_commission DESC;

8. List all accommodations used in a specific package
SELECT a.name_, a.type_, a.room_type, a.room_price
FROM Accom_details ad
JOIN Accommodation a ON ad.accom_id = a.accom_id
WHERE ad.package_id = 6;

9. List of users who gave feedback to a specific guide
SELECT u.username, gf.rating, gf.review
FROM Guide_feedback gf
JOIN User_ u ON gf.user_id = u.user_id
WHERE gf.guide_id = 1;

10. Languages known by each guide
SELECT g.guide_id, g.specialization, array_agg(l.language_) AS languages
FROM Guide g
JOIN Languages_Known l ON g.guide_id = l.guide_id
GROUP BY g.guide_id, g.specialization;

More Advanced Quries

11. Top 3 Highest Rated Packages (by average user rating)
SELECT package_id, AVG(rating) AS avg_rating
FROM Pack_Feedback
GROUP BY package_id
ORDER BY avg_rating DESC
LIMIT 3;

12. Total Revenue Generated by Each Package
SELECT p.package_id, pk.package_name, SUM(pay.paid) AS total_revenue
FROM Payment_done pay
JOIN Packages pk ON pk.package_id = pay.package_id
JOIN Package_Booking p ON p.booking_id = pay.booking_id
GROUP BY p.package_id, pk.package_name
ORDER BY total_revenue DESC;

13. Guides With Average Rating > 4.5 and More Than 5 Reviews
SELECT guide_id, AVG(rating) AS avg_rating, COUNT(*) AS total_reviews
FROM Guide_feedback
GROUP BY guide_id
HAVING AVG(rating) > 4.5 AND COUNT(*) > 5;

14. Most Popular Transportation Mode
SELECT t.type_ AS transport_type, COUNT(*) AS used_count
FROM Transportation t
JOIN Trans_details td ON t.trans_id = td.trans_id
GROUP BY t.type_
ORDER BY used_count DESC
LIMIT 1;

115. List Packages That Include Both Accommodation AND Transportation
SELECT p.package_id, p.package_name
FROM Packages p
WHERE p.package_id IN (SELECT package_id FROM Accom_details)
AND p.package_id IN (SELECT package_id FROM Trans_details);

16. Monthly Booking Summary (Current Year)
SELECT
    EXTRACT(MONTH FROM booking_date) AS month,
    COUNT(*) AS total_bookings,
    SUM(pk.price) AS total_revenue
FROM Package_Booking pb
JOIN Packages pk ON pb.package_id = pk.package_id
WHERE EXTRACT(YEAR FROM booking_date) = EXTRACT(YEAR FROM CURRENT_DATE)
GROUP BY EXTRACT(MONTH FROM booking_date) ORDER BY month;

17. Users Who Have Completed Full Payment (No Outstanding Amount)
SELECT DISTINCT user_id
FROM Payment_done
WHERE outstanding = 10;

18. Users Who Have Cancelled More Than 2 Times
SELECT user_id, COUNT(*) AS cancel_count
FROM Cancelled
GROUP BY user_id
HAVING COUNT(*) > 2;

19. Running Total of Payment Made by a User Across Bookings (Window Function)
SELECT
user_id,
booking_id,
paid,
SUM(paid) OVER (PARTITION BY user_id ORDER BY booking_id) AS running_total_paid
FROM Payment_done;

20. Most Frequently Chosen Interest Category
SELECT interest_category, COUNT(*) AS preference_count
FROM Preference_details
GROUP BY interest_category
ORDER BY preference_count DESC
LIMIT 1;

21. CTE: Packages With Above Average Price
WITH avg_price AS (
SELECT AVG(price) AS avg_val FROM Packages
)
SELECT package_id, package_name, price
FROM Packages, avg_price
WHERE price > avg_val;


22. Packages Never Booked
SELECT package_id, package_name
FROM Packages
WHERE package_id IN (
SELECT DISTINCT package_id FROM Package_Booking
);


